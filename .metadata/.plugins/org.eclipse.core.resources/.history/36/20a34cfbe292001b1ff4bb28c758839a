package com.example.cash.auth;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

public class WebSecurityConfig extends WebSecurityConfigurerAdapter{
	@Autowired JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;
	@Autowired private UserDetailsService jwtUserDetailsService;

    @Autowired private JwtRequestFilter jwtRequestFilter;

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
	        // configure AuthenticationManager so that it knows from where to load
	        // user for matching credentials
	        // Use BCryptPasswordEncoder
	        auth.userDetailsService(jwtUserDetailsService).passwordEncoder(passwordEncoder());
	}
	    
	@Bean
	public PasswordEncoder passwordEncoder() {
	   return new BCryptPasswordEncoder();
	}
	
	@Bean
	@Override
	public AuthenticationManager authenticationManagerBean() throws Exception {
	    return super.authenticationManagerBean();
	}
	
	@Override
	protected void configure(HttpSecurity httpSecurity) throws Exception {
	    // For CORS error
	    httpSecurity.cors().configurationSource(request -> new CorsConfiguration().applyPermitDefaultValues());
	    // We don't need CSRF for this example
	    httpSecurity.csrf().disable()
	        // dont authenticate this particular request
	        .authorizeRequests().antMatchers("/authenticate").permitAll().
	        // all other requests need to be authenticated
	            anyRequest().authenticated().and().
	        
	        // stateless session exceptionHandling().authenticationEntryPoint(jwtAuthenticationEntryPoint).and().sessionManagement()
	        .sessionCreationPolicy(SessionCreationPolicy.STATELESS);
	
	    // Add a filter to validate the tokens with every request
	    httpSecurity.addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);
	}
}
